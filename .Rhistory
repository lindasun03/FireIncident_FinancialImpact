source("~/.active-rstudio-document", echo=TRUE)
hist(SampleMeans, breaks = 30)
n<-3
SimValues <- matrix(0,n,s)
s<-600000
p<-0.1
t<-5
Samplemeans<-numeric(s)
n<-3
SimValues <- matrix(0,n,s)
print(dim(SimValues))
for i in 1:s{
n<-3
SimValues <- matrix(0,n,s)
print(dim(SimValues))
for (i in 1:s){
SimValues[,i]<-rbinom(n,t,p)
SampleMeans[i]<-mean(SimValues[,i])
}
s<-600000
p<-0.1
t<-5
SampleMeans<-numeric(s)
###(a) n = 3
n<-3
SimValues <- matrix(0,n,s)
print(dim(SimValues))
for (i in 1:s){
SimValues[,i]<-rbinom(n,t,p)
SampleMeans[i]<-mean(SimValues[,i])
}
hist(SampleMeans, breaks = 30)
n<-10
SimValues <- matrix(0,n,s)
print(dim(SimValues))
for (i in 1:s){
SimValues[,i]<-rbinom(n,t,p)
SampleMeans[i]<-mean(SimValues[,i])
}
hist(SampleMeans, breaks = 30)
n<-100
SimValues <- matrix(0,n,s)
print(dim(SimValues))
for (i in 1:s){
SimValues[,i]<-rbinom(n,t,p)
SampleMeans[i]<-mean(SimValues[,i])
}
hist(SampleMeans, breaks = 30)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
qnorm(0.9)*s
qnorm(0.9)
s
pnorm(1.5,mu,s)
pnorm(1.5,mu,s)
mu =1
sigma1 =sqrt(4)
N = 40000
n = 30
sumout <- rep(0,N)
for i in (1:N){
data <-c( .83, .88, .88, 1.04, 1.09, 1.12, 1.29, 1.31,
1.48, 1.49, 1.59, 1.62, 1.65, 1.71, 1.76, 1.83)
onesample <- rnorm(n,mu,sigma1)
for (i in 1:N){
onesample <- rnorm(n,mu,sigma1)
sumout[i]<- sum(onesample)
}
for (i in 1:N){
onesample <- rnorm(n,mu,sigma1)
sumout[i]<- sum(onesample)
}
debugSource("~/tut3.R", echo=TRUE)
y <- dnorm(x,mean-mu2, sd = sigma2)
debugSource("~/tut3.R", echo=TRUE)
debugSource("~/tut3.R", echo=TRUE)
for (i in 1:N){
onesample <- rnorm(n,mu,sigma1)
sumout[i]<- sum(onesample)
}
source("~/tut3.R", echo=TRUE)
pnorm(1.5,mu,s)
source("~/tut3.R", echo=TRUE)
##Q1
x <- c(5,12,14,17,23,30,40,47,55,67,72,81,96,112,127)
y <- c(4,10,13,15,15,25,27,46,38,46,53,70,82,99,100)
#n = 15
dataQ1= data.frame(x = x, y = y)
##(a)
install.packages(ggplot2)
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
Drug <- c(rep("A",9),rep("B",9),rep("C",9))
DrugA <- c(4,5,4,3,2,4,3,4,4)
DrugB <- c(6,8,4,5,4,6,5,8,6)
DrugC <- c(6,7,6,6,7,5,6,5,5)
Pain <- c(DrugA, DrugB, DrugC
)
Drugdf <- data.frame(Drug = Drug, Pain = Pain)
model1 <- aov(Pain ~ Drug, data = Drugdf)
summary(model1)
install.packages("EnvStats")
aov_residuals <- residuals(object=model1)
qqplot(aov_residuals)
aov_residuals <- residuals(object=model1)
QQplot(aov_residuals)
Drug <- c(rep("A",9),rep("B",9),rep("C",9))
DrugA <- c(4,5,4,3,2,4,3,4,4)
DrugB <- c(6,8,4,5,4,6,5,8,6)
DrugC <- c(6,7,6,6,7,5,6,5,5)
Pain <- c(DrugA, DrugB, DrugC
)
Drugdf <- data.frame(Drug = Drug, Pain = Pain)
model1 <- aov(Pain ~ Drug, data = Drugdf)
summary(model1)
plot(model1,1)
boxplot(Pain ~ Drug, data = Drugdf)
install.packages("EnvStats")
aov_residuals <- residuals(object=model1)
qqPlot(aov_residuals)
install.packages("EnvStats")
install.packages("car")
aov_residuals <- residuals(object=model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object=model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object=model1)
qqplot(aov_residuals)
Drug <- c(rep("A",9),rep("B",9),rep("C",9))
DrugA <- c(4,5,4,3,2,4,3,4,4)
DrugB <- c(6,8,4,5,4,6,5,8,6)
DrugC <- c(6,7,6,6,7,5,6,5,5)
Pain <- c(DrugA, DrugB, DrugC
)
Drugdf <- data.frame(Drug = Drug, Pain = Pain)
model1 <- aov(Pain ~ Drug, data = Drugdf)
summary(model1)
plot(model1,1)
boxplot(Pain ~ Drug, data = Drugdf)
install.packages("car")
aov_residuals <- residuals(object=model1)
qqPlot(aov_residuals)
install.packages("car")
install.packages('ggplot2', dep = TRUE)
aov_residuals <- residuals(object=model1)
qqPlot(aov_residuals)
install.packages("car")
install.packages('ggplot2', dep = TRUE)
aov_residuals <- residuals(object=model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object=model1)
qqPlot(aov_residuals)
install.packages("car")
install.packages("EnvStats")
install.packages("proto")
install.packages('ggplot2', dep = TRUE)
aov_residuals <- residuals(object=model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object=model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object=model1)
qqplot(aov_residuals)
aov_residuals <- residuals(object=model1)
qqplot(aov_residuals,)
aov_residuals <- residuals(object=model1)
qqplot(aov_residuals,default)
aov_residuals <- residuals(object = model1)
qqplot(aov_residuals)
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object = model1)
qqplot(aov_residuals)
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
Drug <- c(rep("A",9),rep("B",9),rep("C",9))
DrugA <- c(4,5,4,3,2,4,3,4,4)
DrugB <- c(6,8,4,5,4,6,5,8,6)
DrugC <- c(6,7,6,6,7,5,6,5,5)
Pain <- c(DrugA, DrugB, DrugC
)
Drugdf <- data.frame(Drug = Drug, Pain = Pain)
model1 <- aov(Pain ~ Drug, data = Drugdf)
summary(model1)
plot(model1,1)
boxplot(Pain ~ Drug, data = Drugdf)
install.packages("car")
install.packages("EnvStats")
install.packages("proto")
install.packages('ggplot2', dep = TRUE)
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
install.packages("EnvStats")
library(qqPlot)
install.packages(qqplot2)
library(qqplot2)
install.packages("qqplotr")
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object = model1)
ggPlot(aov_residuals)
install.packages("EnvStats")
install.packages("car")
aov_residuals <- residuals(object = model1)
ggPlot(aov_residuals)
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
install.packages("qqPlot")
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
install.packages("EnvStats")
install.packages("car")
install.packages("qqPlot")
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
aov_residuals <- residuals(object = model1)
qqPlot(aov_residuals)
library(AER)
library(AER)
library(future)
import("janitor")
import janitor
package("janitor")
install.packages("AER")
install.packages("future")
install.packages("gitcreds")
install.packages("knitr")
install.packages("lintr")
install.packages("renv")
install.packages("reprex")
install.packages("styler")
install.packages("tictoc")
install.packages("tidyverse")
install.packages("tinytex")
install.packages("usethis")
library(ggplot2)
library(tidyr)
library(dplyr)
library(readr)
Fire_Data <- read_csv("outputs/data/Cleaned_Fire_Incidents_Data.csv")
library(ggplot2)
library(tidyr)
library(dplyr)
library(readr)
Fire_Data <- read_csv("Cleaned_Fire_Incidents_Data.csv")
getwd()
setwd("/Users/lindasun/Documents/FireIncident_FinancialImpact")
getwd
getwd()
library(ggplot2)
library(tidyr)
library(dplyr)
library(readr)
Fire_Data <- read_csv("Cleaned_Fire_Incidents_Data.csv")
library(ggplot2)
library(tidyr)
library(dplyr)
library(readr)
Fire_Data <- read_csv("Cleaned_Fire_Incidents_Data.csv")
Fire_Data <- read_csv(file = here("Cleaned_Fire_Incidents_Data.csv"),
show_col_types = FALSE)
library(ggplot2)
library(tidyr)
library(dplyr)
library(readr)
library(here)
package(here)
package.here
install.packages("here")
library(ggplot2)
library(tidyr)
library(dplyr)
library(readr)
library(here)
Fire_Data <- read_csv(here::here ("Cleaned_Fire_Incidents_Data.csv"),
show_col_types = FALSE)
Fire_Data <- read_csv(here::here ("outputs/data/Cleaned_Fire_Incidents_Data.csv"),
show_col_types = FALSE)
# Aggregating the number of fire incidents per year
fire_counts <- table(fire_data$Year)
fire_Data <- read_csv(here::here ("outputs/data/Cleaned_Fire_Incidents_Data.csv"),
show_col_types = FALSE)
# Aggregating the number of fire incidents per year
fire_counts <- table(fire_data$Year)
fire_data <- read_csv(here::here ("outputs/data/Cleaned_Fire_Incidents_Data.csv"),
show_col_types = FALSE)
# Aggregating the number of fire incidents per year
fire_counts <- table(fire_data$Year)
# Converting to a data frame for plotting
fire_counts_df <- as.data.frame(fire_counts)
# Creating the plot
ggplot(fire_counts_df, aes(Var1, Freq)) +
geom_line() +
geom_point() +
labs(title = "Number of Fire Incidents in Toronto (2018-2022)",
x = "Year",
y = "Number of Fire Incidents") +
theme_minimal()
# Summarizing the estimated dollar loss per year
annual_loss <- aggregate(Estimated_Dollar_Loss ~ Year, data = fire_data, sum)
# Creating the plot
ggplot(annual_loss, aes(x = Year, y = Estimated_Dollar_Loss)) +
geom_line(color = "red") +
geom_point(color = "red") +
labs(title = "Estimated Dollar Loss Due to Fire Incidents in Toronto (2018-2022)",
x = "Year",
y = "Estimated Dollar Loss ($)") +
theme_minimal()
fire_data <- read_csv(here::here ("outputs/data/Cleaned_Fire_Incidents_Data.csv"),
show_col_types = FALSE)
# Aggregating the number of fire incidents per year
fire_counts <- table(fire_data$Year)
# Converting to a data frame for plotting
fire_counts_df <- as.data.frame(fire_counts)
# Creating the plot
ggplot(fire_counts_df, aes(Var1, Freq)) +
geom_line(color = "red") +
geom_point() +
labs(title = "Number of Fire Incidents in Toronto (2018-2022)",
x = "Year",
y = "Number of Fire Incidents") +
theme_minimal()
fire_data <- read_csv(here::here ("outputs/data/Cleaned_Fire_Incidents_Data.csv"),
show_col_types = FALSE)
# Aggregating the number of fire incidents per year
fire_counts <- table(fire_data$Year)
# Converting to a data frame for plotting
fire_counts_df <- as.data.frame(fire_counts)
# Creating the plot
ggplot(fire_counts_df, aes(Var1, Freq)) +
geom_line() +
geom_point() +
labs(title = "Number of Fire Incidents in Toronto (2018-2022)",
x = "Year",
y = "Number of Fire Incidents") +
theme_minimal()
fire_data <- read_csv(here::here ("outputs/data/Cleaned_Fire_Incidents_Data.csv"),
show_col_types = FALSE)
# Aggregating the number of fire incidents per year
fire_counts <- fire_data %>%
group_by(Year) %>%
summarize(Fire_Count = n())
# Creating the plot
ggplot(fire_counts, aes(x = Year, y = Fire_Count)) +
geom_line() +
geom_point() +
labs(title = "Number of Fire Incidents in Toronto (2011-2022)",
x = "Year",
y = "Number of Fire Incidents") +
theme_minimal()
fire_data <- read_csv(here::here ("outputs/data/Cleaned_Fire_Incidents_Data.csv"),
show_col_types = FALSE)
fire_data$Year <- as.integer(fire_data$Year)
# Aggregating the number of fire incidents per year
fire_counts <- fire_data %>%
group_by(Year) %>%
summarize(Fire_Count = n())
# Creating the plot
ggplot(fire_counts, aes(x = Year, y = Fire_Count)) +
geom_line() +
geom_point() +
labs(title = "Number of Fire Incidents in Toronto (2011-2022)",
x = "Year",
y = "Number of Fire Incidents") +
theme_minimal()
fire_data <- read_csv(here::here ("outputs/data/Cleaned_Fire_Incidents_Data.csv"),
show_col_types = FALSE)
fire_data$Year <- as.integer(fire_data$Year)
# Aggregating the number of fire incidents per year
fire_counts <- fire_data %>%
group_by(Year) %>%
summarize(Fire_Count = n())
# Creating the plot
ggplot(fire_counts, aes(x = Year, y = Fire_Count)) +
geom_line() +
geom_point() +
labs(title = "Number of Fire Incidents in Toronto (2011-2022)",
x = "Year",
y = "Number of Fire Incidents") +
theme_minimal()
# Summarizing the estimated dollar loss per year
annual_loss <- aggregate(Estimated_Dollar_Loss ~ Year, data = fire_data, sum)
# Creating the plot
ggplot(annual_loss, aes(x = Year, y = Estimated_Dollar_Loss)) +
geom_line(color = "red") +
geom_point(color = "red") +
labs(title = "Estimated Dollar Loss Due to Fire Incidents in Toronto (2018-2022)",
x = "Year",
y = "Estimated Dollar Loss ($)") +
theme_minimal()
fire_data <- read_csv(here::here ("outputs/data/Cleaned_Fire_Incidents_Data.csv"),
show_col_types = FALSE)
fire_data$Year <- as.integer(fire_data$Year)
# Aggregating the number of fire incidents per year
fire_counts <- fire_data %>%
group_by(Year) %>%
summarize(Fire_Count = n())
# Creating the plot
ggplot(fire_counts, aes(x = Year, y = Fire_Count)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = fire_counts$Year) +
labs(title = "Number of Fire Incidents in Toronto (2011-2022)",
x = "Year",
y = "Number of Fire Incidents") +
theme_minimal()
# Summarizing the estimated dollar loss per year
annual_loss <- aggregate(Estimated_Dollar_Loss ~ Year, data = fire_data, sum)
# Creating the plot
ggplot(annual_loss, aes(x = Year, y = Estimated_Dollar_Loss)) +
geom_line(color = "red") +
geom_point(color = "red") +
scale_x_continuous(breaks = fire_counts$Year) +
labs(title = "Estimated Dollar Loss Due to Fire Incidents in Toronto (2018-2022)",
x = "Year",
y = "Estimated Dollar Loss ($)") +
theme_minimal()
View(fire_Data)
# Summarizing the estimated dollar loss per year
annual_loss <- aggregate(Estimated_Dollar_Loss ~ Year, data = fire_data, sum)
# Creating the plot
ggplot(annual_loss, aes(x = Year, y = Estimated_Dollar_Loss)) +
geom_line(color = "red") +
geom_point(color = "red") +
scale_x_continuous(breaks = fire_counts$Year) +
labs(title = "Estimated Dollar Loss Due to Fire Incidents in Toronto (2011-2022)",
x = "Year",
y = "Estimated Dollar Loss ($)") +
theme_minimal()
quarto install tinytex
quarto::install_tinytex()
install.packages("quarto")
quarto::install_tinytex()
quarto install tinytex
quarto install tinytex
o TeX installation was detected.
quarto::install_tinytex()
install.packages("tinytex")
tinytex::install_tinytex()
library(ggplot2)
library(tidyr)
library(dplyr)
library(readr)
library(here)
if (FALSE) {
library(ggplot2)
library(tidyr)
library(dplyr)
library(readr)
library(here)}
if (FALSE) {
library(ggplot2)
library(tidyr)
library(dplyr)
library(readr)
library(here)}
